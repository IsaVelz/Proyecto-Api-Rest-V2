<!-- PENDIENTE CORREGIR CONSULTAR PARA ESTA TABLA -->


@page "/activ_academica"
@using BlazorFrontEnd.Services
@inject ApiService ServicioApi
@inject IJSRuntime ServicioJS


<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Actividades Académicas</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#modalAgregarActividadAcademica" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepararParaAgregarOEditar()">
                            <i class="material-icons">&#xE147;</i> <span>Nueva</span>
                        </a>
                        <!-- Botón que abre el modal para añadir una nueva actividad académica -->

                        <a href="#modalConsultarActividadAcademica" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepararParaConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </a>
                        <!-- Botón que abre el modal para consultar una actividad académica existente -->
                    </div>
                </div>
            </div>
            @if (actividadesAcademicas == null)
            {
                <p>Cargando...</p>
                <!-- Muestra un mensaje mientras se cargan los datos -->
            }
            else if (!actividadesAcademicas.Any())
            {
                <p>No hay actividades académicas registradas.</p>
                <!-- Muestra un mensaje si no hay actividades académicas en la lista -->
            }
            else
            {
                <!-- Muestra la tabla con la lista de actividades académicas si la lista contiene datos -->
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Nombre</th>
                            <th>Número de Créditos</th>
                            <th>Tipo</th>
                            <th>Área de Formación</th>
                            <th>Horas Acompañamiento</th>
                            <th>Horas Independientes</th>
                            <th>Idioma</th>
                            <th>Espejo</th>
                            <th>Entidad Espejo</th>
                            <th>País Espejo</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var actividad in actividadesAcademicas)
                        {
                            <tr>
                                <td>@actividad["id"]</td>
                                <!-- Muestra el id de la actividad académica -->
                                <td>@actividad["nombre"]</td>
                                <!-- Muestra el nombre de la actividad académica -->
                                <td>@actividad["num_creditos"]</td>
                                <!-- Muestra el número de créditos de la actividad académica -->
                                <td>@actividad["tipo"]</td>
                                <!-- Muestra el tipo de la actividad académica -->
                                <td>@actividad["area_formacion"]</td>
                                <!-- Muestra el área de formación de la actividad académica -->
                                <td>@actividad["h_acom"]</td>
                                <!-- Muestra las horas de acompañamiento de la actividad académica -->
                                <td>@actividad["h_indep"]</td>
                                <!-- Muestra las horas independientes de la actividad académica -->
                                <td>@actividad["idioma"]</td>
                                <!-- Muestra el idioma de la actividad académica -->
                                <td>@(Convert.ToBoolean(actividad["espejo"]) ? "Sí" : "No")</td>
                                <!-- Muestra si la actividad académica es espejo -->
                                <td>@actividad["entidad_espejo"]</td>
                                <!-- Muestra la entidad espejo de la actividad académica -->
                                <td>@actividad["pais_espejo"]</td>
                                <!-- Muestra el país espejo de la actividad académica -->
                                <td>
                                    <a href="#modalAgregarActividadAcademica" class="edit" data-bs-toggle="modal" @onclick="() => PrepararParaEditar(actividad)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <!-- Botón para editar la actividad académica -->
                                    <a href="#modalEliminarActividadAcademica" class="delete" data-bs-toggle="modal" @onclick="() => AsignarActividadAcademicaParaEliminar(actividad)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                    <!-- Botón para eliminar la actividad académica -->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para Añadir/Editar Actividad Académica -->
<div class="modal fade" id="modalAgregarActividadAcademica" tabindex="-1" role="dialog" aria-labelledby="modalAgregarActividadAcademicaLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@actividadActual" OnValidSubmit="GuardarActividadAcademica">
                <DataAnnotationsValidator />
                <!-- Valida los campos del formulario usando anotaciones de datos en C# -->
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAgregarActividadAcademicaLabel">@(esNuevaActividad ? "Añadir" : "Editar") Actividad Académica</h5>
                    <!-- El título del modal cambia según si se está añadiendo o editando una actividad académica -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Campos del formulario para ingresar los datos de la actividad académica -->
                    <div class="form-group">
                        <label>Id</label>
                        <InputText class="form-control" @bind-Value="id" />
                        <ValidationMessage For="@(() => id)" />
                        <!-- Campo para ingresar el id de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>Nombre</label>
                        <InputText class="form-control" @bind-Value="nombre" />
                        <ValidationMessage For="@(() => nombre)" />
                        <!-- Campo para ingresar el nombre de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>Número de Créditos</label>
                        <InputNumber class="form-control" @bind-Value="numCreditos" />
                        <ValidationMessage For="@(() => numCreditos)" />
                        <!-- Campo para ingresar el número de créditos de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>Tipo</label>
                        <InputText class="form-control" @bind-Value="tipo" />
                        <ValidationMessage For="@(() => tipo)" />
                        <!-- Campo para ingresar el tipo de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>Área de Formación</label>
                        <InputText class="form-control" @bind-Value="areaFormacion" />
                        <ValidationMessage For="@(() => areaFormacion)" />
                        <!-- Campo para ingresar el área de formación de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>Horas Acompañamiento</label>
                        <InputNumber class="form-control" @bind-Value="hAcom" />
                        <ValidationMessage For="@(() => hAcom)" />
                        <!-- Campo para ingresar las horas de acompañamiento de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>Horas Independientes</label>
                        <InputNumber class="form-control" @bind-Value="hIndep" />
                        <ValidationMessage For="@(() => hIndep)" />
                        <!-- Campo para ingresar las horas independientes de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>Idioma</label>
                        <InputText class="form-control" @bind-Value="idioma" />
                        <ValidationMessage For="@(() => idioma)" />
                        <!-- Campo para ingresar el idioma de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>Espejo</label>
                        <InputCheckbox class="form-check-input" @bind-Value="espejo" />
                        <ValidationMessage For="@(() => espejo)" />
                        <!-- Campo para indicar si la actividad académica es espejo -->
                    </div>
                    <div class="form-group">
                        <label>Entidad Espejo</label>
                        <InputText class="form-control" @bind-Value="entidadEspejo" />
                        <ValidationMessage For="@(() => entidadEspejo)" />
                        <!-- Campo para ingresar la entidad espejo de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>País Espejo</label>
                        <InputText class="form-control" @bind-Value="paisEspejo" />
                        <ValidationMessage For="@(() => paisEspejo)" />
                        <!-- Campo para ingresar el país espejo de la actividad académica -->
                    </div>
                    <div class="form-group">
                        <label>Diseño</label>
                        <InputNumber class="form-control" @bind-Value="disenio" />
                        <ValidationMessage For="@(() => disenio)" />
                        <!-- Campo para ingresar el diseño de la actividad académica -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(esNuevaActividad ? "Añadir" : "Guardar")</button>
                    <!-- Botón de acción que cambia según si se está añadiendo o guardando -->
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Eliminar Actividad Académica -->
<div class="modal fade" id="modalEliminarActividadAcademica" tabindex="-1" role="dialog" aria-labelledby="modalEliminarActividadAcademicaLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEliminarActividadAcademicaLabel">Eliminar Actividad Académica</h5>
                <!-- Título del modal para eliminar una actividad académica -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar esta actividad académica?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                <!-- Mensaje de advertencia para la eliminación -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CancelarEliminacion">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarActividadAcademica">Eliminar</button>
                <!-- Botón para confirmar la eliminación de la actividad académica -->
            </div>
        </div>
    </div>
</div>

<!-- Modal para Consultar Actividad Académica -->
<div class="modal fade" id="modalConsultarActividadAcademica" tabindex="-1" role="dialog" aria-labelledby="modalConsultarActividadAcademicaLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalConsultarActividadAcademicaLabel">Consultar Actividad Académica</h5>
                <!-- Título del modal para consultar una actividad académica -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Campos para ingresar el id y mostrar la información de la actividad académica consultada -->
                <div class="form-group">
                    <label>Id</label>
                    <input type="text" class="form-control" @bind="consultaId" @bind:event="oninput" />
                    <!-- Campo para ingresar el id de la actividad académica a consultar -->
                </div>
                <div class="form-group">
                    <label>Nombre</label>
                    <input type="text" class="form-control" @bind="consultaNombre" readonly />
                    <!-- Campo para mostrar el nombre de la actividad académica consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Número de Créditos</label>
                    <input type="number" class="form-control" @bind="consultaNumCreditos" readonly />
                    <!-- Campo para mostrar el número de créditos de la actividad académica consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Tipo</label>
                    <input type="text" class="form-control" @bind="consultaTipo" readonly />
                    <!-- Campo para mostrar el tipo de la actividad académica consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Área de Formación</label>
                    <input type="text" class="form-control" @bind="consultaAreaFormacion" readonly />
                    <!-- Campo para mostrar el área de formación de la actividad académica consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Horas Acompañamiento</label>
                    <input type="number" class="form-control" @bind="consultaHAcom" readonly />
                    <!-- Campo para mostrar las horas de acompañamiento de la actividad académica consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Horas Independientes</label>
                    <input type="number" class="form-control" @bind="consultaHIndep" readonly />
                    <!-- Campo para mostrar las horas independientes de la actividad académica consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Idioma</label>
                    <input type="text" class="form-control" @bind="consultaIdioma" readonly />
                    <!-- Campo para mostrar el idioma de la actividad académica consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Espejo</label>
                    <input type="checkbox" class="form-check-input" @bind="consultaEspejo" disabled />
                    <!-- Campo para indicar si la actividad académica es espejo, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Entidad Espejo</label>
                    <input type="text" class="form-control" @bind="consultaEntidadEspejo" readonly />
                    <!-- Campo para mostrar la entidad espejo de la actividad académica consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>País Espejo</label>
                    <input type="text" class="form-control" @bind="consultaPaisEspejo" readonly />
                    <!-- Campo para mostrar el país espejo de la actividad académica consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Diseño</label>
                    <input type="number" class="form-control" @bind="consultaDisenio" readonly />
                    <!-- Campo para mostrar el diseño de la actividad académica consultada, es de solo lectura -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarActividadAcademica">Consultar</button>
                <!-- Botón para realizar la consulta de la actividad académica con el id ingresado -->
                <button type="button" class="btn btn-warning" @onclick="ModificarActividadAcademicaConsultada" disabled="@(!actividadEncontrada)">Modificar</button>
                <!-- Botón para modificar la actividad académica consultada si fue encontrada -->
                <button type="button" class="btn btn-danger" @onclick="EliminarActividadAcademicaConsultada" disabled="@(!actividadEncontrada)">Eliminar</button>
                <!-- Botón para eliminar la actividad académica consultada si fue encontrada -->
            </div>
        </div>
    </div>
</div>

@code {
    private List<Dictionary<string, object>> actividadesAcademicas = new List<Dictionary<string, object>>();
    // Lista que almacena las actividades académicas obtenidas desde la API

    private Dictionary<string, object> actividadActual = new Dictionary<string, object>();
    // Diccionario que representa la actividad académica actual que se está añadiendo o editando

    private bool esNuevaActividad = true;
    // Bandera que indica si se está añadiendo una nueva actividad académica o editando una existente

    private bool actividadEncontrada = false;
    // Bandera que indica si una actividad académica fue encontrada durante la consulta

    private string id = "";
    // Variable que almacena el id de la actividad durante la edición o creación

    private string nombre = "";
    // Variable que almacena el nombre de la actividad durante la edición o creación

    private int numCreditos = 0;
    // Variable que almacena el número de créditos de la actividad durante la edición o creación

    private string tipo = "";
    // Variable que almacena el tipo de la actividad durante la edición o creación

    private string areaFormacion = "";
    // Variable que almacena el área de formación de la actividad durante la edición o creación

    private int hAcom = 0;
    // Variable que almacena las horas de acompañamiento de la actividad durante la edición o creación

    private int hIndep = 0;
    // Variable que almacena las horas independientes de la actividad durante la edición o creación

    private string idioma = "";
    // Variable que almacena el idioma de la actividad durante la edición o creación

    private bool espejo = false;
    // Variable que indica si la actividad es un curso espejo durante la edición o creación

    private string entidadEspejo = "";
    // Variable que almacena la entidad espejo de la actividad durante la edición o creación

    private string paisEspejo = "";
    // Variable que almacena el país espejo de la actividad durante la edición o creación

    private int disenio = 0;
    // Variable que almacena el diseño de la actividad durante la edición o creación (puede ser nulo)

    private bool isDeleted = false;
    // Variable que indica si la actividad está eliminada (lógica)

    // Variables para la consulta
    private string consultaId = "";
    private string consultaNombre = "";
    private int consultaNumCreditos = 0;
    private string consultaTipo = "";
    private string consultaAreaFormacion = "";
    private int consultaHAcom = 0;
    private int consultaHIndep = 0;
    private string consultaIdioma = "";
    private bool consultaEspejo = false;
    private string consultaEntidadEspejo = "";
    private string consultaPaisEspejo = "";
    private int consultaDisenio = 0;
    private bool consultaIsDeleted = false;

    protected override async Task OnInitializedAsync()
    {
        await CargarActividadesAcademicas();
        // Método que se ejecuta al inicializar el componente. Carga la lista de actividades academicas desde la API.
    } 

    private async Task CancelarEliminacion()
    {
        await ServicioJS.InvokeVoidAsync("hideModal", "modalEliminaractividadesAcademicas");
        await ServicioJS.InvokeVoidAsync("removeBackdrop");
    }

    private async Task CargarActividadesAcademicas()
    {
        try
        {
            actividadesAcademicas = await ServicioApi.GetDataAsync("api/proyecto/activ_academica");
            actividadesAcademicas = actividadesAcademicas.Where(a => !(bool)(a["IsDeleted"] ?? false)).ToList(); // Filtra solo las activas

            // Llama a la API para obtener la lista de áreas de conocimiento y la almacena en la variable 'actividadesAcademicas'.
            StateHasChanged(); // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar áreas de conocimiento: {ex.Message}");
            // Opcional: Log error en vez de mostrar alerta
            // await ServicioJS.InvokeVoidAsync("console.log", "Error al cargar actividades academicas.");
        }
    }

    private void PrepararParaAgregarOEditar(Dictionary<string, object>? actividadAcademica = null)
    {
    esNuevaActividad = actividadAcademica == null;
    // Si 'actividadAcademica' es null, significa que estamos añadiendo una nueva actividad académica. De lo contrario, estamos editando.
    actividadActual = actividadAcademica ?? new Dictionary<string, object>();
    // Si 'actividadAcademica' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la actividad seleccionada.

    id = actividadActual.TryGetValue("id", out var c) ? c?.ToString() ?? "" : "";
    nombre = actividadActual.TryGetValue("nombre", out var n) ? n?.ToString() ?? "" : "";
    numCreditos = actividadActual.TryGetValue("num_creditos", out var nc) ? Convert.ToInt32(nc) : 0;
    tipo = actividadActual.TryGetValue("tipo", out var t) ? t?.ToString() ?? "" : "";
    areaFormacion = actividadActual.TryGetValue("area_formacion", out var af) ? af?.ToString() ?? "" : "";
    hAcom = actividadActual.TryGetValue("h_acom", out var ha) ? Convert.ToInt32(ha) : 0;
    hIndep = actividadActual.TryGetValue("h_indep", out var hi) ? Convert.ToInt32(hi) : 0;
    idioma = actividadActual.TryGetValue("idioma", out var i) ? i?.ToString() ?? "" : "";
    espejo = actividadActual.TryGetValue("espejo", out var e) ? Convert.ToBoolean(e) : false;
    entidadEspejo = actividadActual.TryGetValue("entidad_espejo", out var ee) ? ee?.ToString() ?? "" : "";
    paisEspejo = actividadActual.TryGetValue("pais_espejo", out var pe) ? pe?.ToString() ?? "" : "";
    disenio = actividadActual.TryGetValue("disenio", out var d) ? d != null ? Convert.ToInt32(d) : 0 : 0;
    isDeleted = actividadActual.TryGetValue("isDeleted", out var idel) ? Convert.ToBoolean(idel) : false;
    // Extrae los valores de las propiedades de 'actividadActual' y los asigna a las variables correspondientes.

    if (esNuevaActividad) {
        ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarActividadAcademica");
    } else {
        ServicioJS.InvokeVoidAsync("showModal", "modalAgregarActividadAcademica");
    }
    // Muestra el modal para añadir o editar actividad académica usando JavaScript.
    }

    private void PrepararParaEditar(Dictionary<string, object>? actividadAcademica = null)
    {
    esNuevaActividad = false;
    actividadActual = actividadAcademica ?? new Dictionary<string, object>();
    // Si 'actividadAcademica' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la actividad seleccionada.

    id = actividadActual.TryGetValue("id", out var c) ? c?.ToString() ?? "" : "";
    nombre = actividadActual.TryGetValue("nombre", out var n) ? n?.ToString() ?? "" : "";
    numCreditos = actividadActual.TryGetValue("num_creditos", out var nc) ? Convert.ToInt32(nc) : 0;
    tipo = actividadActual.TryGetValue("tipo", out var t) ? t?.ToString() ?? "" : "";
    areaFormacion = actividadActual.TryGetValue("area_formacion", out var af) ? af?.ToString() ?? "" : "";
    hAcom = actividadActual.TryGetValue("h_acom", out var ha) ? Convert.ToInt32(ha) : 0;
    hIndep = actividadActual.TryGetValue("h_indep", out var hi) ? Convert.ToInt32(hi) : 0;
    idioma = actividadActual.TryGetValue("idioma", out var i) ? i?.ToString() ?? "" : "";
    espejo = actividadActual.TryGetValue("espejo", out var e) ? Convert.ToBoolean(e) : false;
    entidadEspejo = actividadActual.TryGetValue("entidad_espejo", out var ee) ? ee?.ToString() ?? "" : "";
    paisEspejo = actividadActual.TryGetValue("pais_espejo", out var pe) ? pe?.ToString() ?? "" : "";
    disenio = actividadActual.TryGetValue("disenio", out var d) ? d != null ? Convert.ToInt32(d) : 0 : 0;
    isDeleted = actividadActual.TryGetValue("isDeleted", out var idel) ? Convert.ToBoolean(idel) : false;
    // Extrae los valores de las propiedades de 'actividadActual' y los asigna a las variables correspondientes.

    ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarActividadAcademica");
    // Muestra el modal para editar la actividad académica usando JavaScript.
    }

    private void PrepararParaConsulta()
    {
    consultaId = "";
    consultaNombre = "";
    consultaNumCreditos = 0;
    consultaTipo = "";
    consultaAreaFormacion = "";
    consultaHAcom = 0;
    consultaHIndep = 0;
    consultaIdioma = "";
    consultaEspejo = false;
    consultaEntidadEspejo = "";
    consultaPaisEspejo = "";
    consultaDisenio = 0;
    consultaIsDeleted = false;
    actividadEncontrada = false;
    // Limpia los campos de consulta y establece 'actividadEncontrada' en false.
    }

    private void AsignarActividadAcademicaParaEliminar(Dictionary<string, object> actividadAcademica)
    {
    actividadActual = actividadAcademica;
    // Asegúrate de que todos los datos de la actividad académica seleccionada se estén asignando correctamente
    Console.WriteLine($"Actividad académica seleccionada para eliminar: Id: {actividadActual["id"]}, Nombre: {actividadActual["nombre"]}");
    
    ServicioJS.InvokeVoidAsync("showModal", "modalEliminarActividadAcademica");
    // Muestra el modal para confirmar la eliminación usando JavaScript.
    }

    private async Task GuardarActividadAcademica()
{
    try
    {
        actividadActual["id"] = id;
        actividadActual["nombre"] = nombre;
        actividadActual["num_creditos"] = numCreditos;
        actividadActual["tipo"] = tipo;
        actividadActual["area_formacion"] = areaFormacion;
        actividadActual["h_acom"] = hAcom;
        actividadActual["h_indep"] = hIndep;
        actividadActual["idioma"] = idioma;
        actividadActual["espejo"] = espejo;
        actividadActual["entidad_espejo"] = entidadEspejo;
        actividadActual["pais_espejo"] = paisEspejo;
        actividadActual["disenio"] = disenio;
        actividadActual["isDeleted"] = isDeleted;
        // Actualiza 'actividadActual' con los valores actuales de los campos de entrada.

        bool exito;
        if (esNuevaActividad)
        {
            exito = await ServicioApi.AddEntityAsync("api/proyecto/activ_academica", actividadActual);
            // Si estamos añadiendo una nueva actividad académica, llama a la API para añadirla.
        }
        else
        {
            exito = await ServicioApi.EditEntityAsync("api/proyecto/activ_academica/id", id, actividadActual);
            // Si estamos editando una actividad académica existente, llama a la API para editarla.
        }

        if (exito)
        {
            await ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarActividadAcademica");
            // Si la operación tiene éxito, cierra el modal.

            await CargarActividadesAcademicas();
            // Recarga la lista de actividades académicas para reflejar los cambios.

            id = nombre = tipo = areaFormacion = idioma = entidadEspejo = paisEspejo = string.Empty;
            numCreditos = hAcom = hIndep = disenio = 0;
            espejo = false;
            actividadActual = new Dictionary<string, object>();
            esNuevaActividad = true;
            // Limpia los campos del formulario y restablece el estado.

            StateHasChanged();
            // Fuerza la actualización de la UI.

            await ServicioJS.InvokeVoidAsync("alert", "Operación realizada con éxito.");
            // Muestra un mensaje de éxito al usuario.
        }
        else
        {
            await ServicioJS.InvokeVoidAsync("alert", "Error al guardar la actividad académica. Por favor, intente nuevamente.");
            // Si la operación falla, muestra un mensaje de error.
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al guardar actividad académica: {ex.Message}");
        await ServicioJS.InvokeVoidAsync("alert", "Error al guardar la actividad académica. Por favor, intente nuevamente.");
        // Muestra un error en la consola y una alerta si hay una excepción durante el guardado.
    }
}

    private async Task EliminarActividadAcademica()
    {
    try
    {
        if (actividadActual.TryGetValue("id", out var idObj) && idObj is string idStr)
        {
            actividadActual["isDeleted"] = true; // Cambia el estado a no activo
            bool exito = await ServicioApi.DeleteEntityAsync($"api/proyecto/activ_academica/id", idStr);
            if (exito)
            {
                await ServicioJS.InvokeVoidAsync("hideModal", "modalEliminarActividadAcademica");
                await CargarActividadesAcademicas();
                await ServicioJS.InvokeVoidAsync("alert", "Actividad académica eliminada con éxito.");
            }
            else
            {
                await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar la actividad académica. Por favor, intente nuevamente.");
            }
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al eliminar actividad académica: {ex.Message}");
        await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar la actividad académica. Por favor, intente nuevamente.");
    }
    }

    private async Task ConsultarActividadAcademica()
{
    try
    {
        // Se consulta el registro con el ID proporcionado
        var resultado = await ServicioApi.GetDataAsync($"api/proyecto/activ_academica/id/{consultaId}");

        // Verificar si se obtuvo un resultado válido
        if (resultado != null && resultado.Any())
        {
            // Acceder al primer registro encontrado
            var actividadConsultada = resultado.FirstOrDefault();

            if (actividadConsultada != null)
            {
                // Asignar los valores a las variables correspondientes
                consultaNombre = actividadConsultada["nombre"]?.ToString() ?? "";
                consultaNumCreditos = int.TryParse(actividadConsultada["num_creditos"]?.ToString(), out int numCreditos) ? numCreditos : 0;
                consultaTipo = actividadConsultada["tipo"]?.ToString() ?? "";
                consultaAreaFormacion = actividadConsultada["area_formacion"]?.ToString() ?? "";
                consultaHAcom = int.TryParse(actividadConsultada["h_acom"]?.ToString(), out int horasAcomp) ? horasAcomp : 0;
                consultaHIndep = int.TryParse(actividadConsultada["h_indep"]?.ToString(), out int horasIndep) ? horasIndep : 0;
                consultaIdioma = actividadConsultada["idioma"]?.ToString() ?? "";
                consultaEspejo = actividadConsultada["espejo"]?.ToString() == "1";
                consultaEntidadEspejo = actividadConsultada["entidad_espejo"]?.ToString() ?? "";
                consultaPaisEspejo = actividadConsultada["pais_espejo"]?.ToString() ?? "";
                consultaDisenio = int.TryParse(actividadConsultada["disenio"]?.ToString(), out int disenio) ? disenio : 0;

                actividadEncontrada = true;
            }
        }
        else
        {
            // Si no hay registros encontrados, se limpian los campos
            LimpiarCamposActividadAcademica();
            actividadEncontrada = false;

            // Mostrar alerta al usuario
            await ServicioJS.InvokeVoidAsync("alert", "No se encontró ninguna actividad académica con ese id.");
        }
        StateHasChanged();
    }
    catch (Exception ex)
    {
        // Manejo de errores y mostrar mensaje de error al usuario
        Console.WriteLine($"Error al consultar actividad académica: {ex.Message}");
        await ServicioJS.InvokeVoidAsync("alert", "Error al consultar la actividad académica. Por favor, intente nuevamente.");
    }
}

// Método para limpiar todos los campos de la consulta
private void LimpiarCamposActividadAcademica()
{
    consultaNombre = "";
    consultaNumCreditos = 0;
    consultaTipo = "";
    consultaAreaFormacion = "";
    consultaHAcom = 0;
    consultaHIndep = 0;
    consultaIdioma = "";
    consultaEspejo = false;
    consultaEntidadEspejo = "";
    consultaPaisEspejo = "";
    consultaDisenio = 0;
}




    private async Task ModificarActividadAcademicaConsultada()
    {
    PrepararParaAgregarOEditar(new Dictionary<string, object>
    {
        ["id"] = consultaId,
        ["nombre"] = consultaNombre,
        ["num_creditos"] = consultaNumCreditos,
        ["tipo"] = consultaTipo,
        ["area_formacion"] = consultaAreaFormacion,
        ["h_acom"] = consultaHAcom,
        ["h_indep"] = consultaHIndep,
        ["idioma"] = consultaIdioma,
        ["espejo"] = consultaEspejo,
        ["entidad_espejo"] = consultaEntidadEspejo,
        ["pais_espejo"] = consultaPaisEspejo,
        ["disenio"] = consultaDisenio,
        ["isDeleted"] = consultaIsDeleted
    });
    await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarActividadAcademica");
    // Prepara los datos consultados para la edición y cierra el modal de consulta.
    }

    private async Task EliminarActividadAcademicaConsultada()
{
    AsignarActividadAcademicaParaEliminar(new Dictionary<string, object>
    {
        ["id"] = consultaId,
        ["nombre"] = consultaNombre,
        ["num_creditos"] = consultaNumCreditos,
        ["tipo"] = consultaTipo,
        ["area_formacion"] = consultaAreaFormacion,
        ["h_acom"] = consultaHAcom,
        ["h_indep"] = consultaHIndep,
        ["idioma"] = consultaIdioma,
        ["espejo"] = consultaEspejo,
        ["entidad_espejo"] = consultaEntidadEspejo,
        ["pais_espejo"] = consultaPaisEspejo,
        ["disenio"] = consultaDisenio,
        ["isDeleted"] = consultaIsDeleted
    });
    await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarActividadAcademica");
    // Prepara los datos consultados para la eliminación y cierra el modal de consulta.
}
}

<style>
    .table-title {
        background-color: #4C45A0;
        color: white;
        padding: 15px;
        border-radius: 8px 8px 0 0;
    }

    .table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 1rem;
        background-color: white;
    }

    .table thead th {
        background-color: #BCA6DA;
        color: #4C45A0;
        padding: 10px;
        font-weight: bold; 
    }

    .table tbody tr {
        border-bottom: 1px solid #ddd;
    }

    .table tbody tr:hover {
        background-color: #f1f1f1;
    }

    .table tbody td {
        padding: 10px;
    }

    .btn-success {
        background-color: #4C45A0;
        border-color: #4C45A0;
    }

    .btn-success:hover {
        background-color: #3b368c;
        border-color: #3b368c;
    }

    .edit i,
    .delete i {
        font-size: 20px;
        color: #3d5bc9;
        margin: 0 5px;
    }

    .edit i:hover {
        color: #BCA6DA;
    }

    .delete i:hover {
        color: red;
    }

    .modal-header {
        background-color: #4C45A0;
        color: white;
    }

    .btn-primary,
    .btn-danger {
        background-color: #4C45A0;
        border-color: #4C45A0;
    }

    .btn-primary:hover,
    .btn-danger:hover {
        background-color: #3b368c;
        border-color: #3b368c;
    }

    .btn-secondary {
        background-color: #BCA6DA;
        border-color: #BCA6DA;
        color: #4C45A0;
    }

    .btn-secondary:hover {
        background-color: #a394c2;
        border-color: #a394c2;
    }
</style>
