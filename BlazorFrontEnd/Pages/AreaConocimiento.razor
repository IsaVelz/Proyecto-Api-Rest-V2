@page "/area_conocimiento"
@using BlazorFrontEnd.Services
@inject ApiService ServicioApi
@inject IJSRuntime ServicioJS
<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Áreas de Conocimiento</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#modalAgregarAreaConocimiento" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepararParaAgregarOEditar()">
                            <i class="material-icons">&#xE147;</i> <span>Nueva</span>
                        </a>
                        <!-- Botón que abre el modal para añadir una nueva área de conocimiento -->

                        <a href="#modalConsultarAreaConocimiento" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepararParaConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </a>
                        <!-- Botón que abre el modal para consultar una área de conocimiento existente -->
                    </div>
                </div>
            </div>
            @if (areasConocimiento == null)
            {
                <p>Cargando...</p>
                <!-- Muestra un mensaje mientras se cargan los datos -->
            }
            else if (!areasConocimiento.Any())
            {
                <p>No hay áreas de conocimiento registradas.</p>
                <!-- Muestra un mensaje si no hay áreas de conocimiento en la lista -->
            }
            else
            {
                <!-- Muestra la tabla con la lista de áreas de conocimiento si la lista contiene datos -->
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Gran Área</th>
                            <th>Área</th>
                            <th>Disciplina</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var area in areasConocimiento)
                        {
                            <tr>
                                <td>@area["id"]</td>
                                <!-- Muestra el id del área de conocimiento -->
                                <td>@area["gran_area"]</td>
                                <!-- Muestra la gran área del área de conocimiento -->
                                <td>@area["area"]</td>
                                <!-- Muestra el área del área de conocimiento -->
                                <td>@area["disciplina"]</td>
                                <!-- Muestra la disciplina del área de conocimiento -->
                                <td>
                                    <a href="#modalAgregarAreaConocimiento" class="edit" data-bs-toggle="modal" @onclick="() => PrepararParaEditar(area)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <!-- Botón para editar el área de conocimiento -->
                                    <a href="#modalEliminarAreaConocimiento" class="delete" data-bs-toggle="modal" @onclick="() => AsignarAreaConocimientoParaEliminar(area)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                    <!-- Botón para eliminar el área de conocimiento -->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para Añadir/Editar Area de Conocimiento -->
<div class="modal fade" id="modalAgregarAreaConocimiento" tabindex="-1" role="dialog" aria-labelledby="modalAgregarAreaConocimientoLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@areaActual" OnValidSubmit="GuardarAreaConocimiento">
                <DataAnnotationsValidator />
                <!-- Valida los campos del formulario usando anotaciones de datos en C# -->
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAgregarAreaConocimientoLabel">@(esNuevaArea? "Añadir" : "Editar") Área de Conocimiento</h5>
                    <!-- El título del modal cambia según si se está añadiendo o editando un área de conocimiento -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Campos del formulario para ingresar los datos del área de conocimiento -->
                    <div class="form-group">
                        <label>Id</label>
                        <InputText class="form-control" @bind-Value="id" />
                        <ValidationMessage For="@(() => id)" />
                        <!-- Campo para ingresar el id del área de conocimiento -->
                    </div>
                    <div class="form-group">
                        <label>Gran Área</label>
                        <InputText class="form-control" @bind-Value="granArea" />
                        <ValidationMessage For="@(() => granArea)" />
                        <!-- Campo para ingresar la gran área del área de conocimiento -->
                    </div>
                    <div class="form-group">
                        <label>Área</label>
                        <InputText class="form-control" @bind-Value="area" />
                        <ValidationMessage For="@(() => area)" />
                        <!-- Campo para ingresar el área del área de conocimiento -->
                    </div>
                    <div class="form-group">
                        <label>Disciplina</label>
                        <InputText class="form-control" @bind-Value="disciplina" />
                        <ValidationMessage For="@(() => disciplina)" />
                        <!-- Campo para ingresar la disciplina del área de conocimiento -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(esNuevaArea ? "Añadir" : "Guardar")</button>
                    <!-- Botón de acción que cambia según si se está añadiendo o guardando -->
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Eliminar Area de Conocimiento -->
<div class="modal fade" id="modalEliminarAreaConocimiento" tabindex="-1" role="dialog" aria-labelledby="modalEliminarAreaConocimientoLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEliminarAreaConocimientoLabel">Eliminar Área de Conocimiento</h5>
                <!-- Título del modal para eliminar un área de conocimiento -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar esta área de conocimiento?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                <!-- Mensaje de advertencia para la eliminación -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CancelarEliminacion">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarAreaConocimiento">Eliminar</button>
                <!-- Botón para confirmar la eliminación del área de conocimiento -->
            </div>
        </div>
    </div>
</div>

<!-- Modal para Consultar Area de Conocimiento -->
<div class="modal fade" id="modalConsultarAreaConocimiento" tabindex="-1" role="dialog" aria-labelledby="modalConsultarAreaConocimientoLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalConsultarAreaConocimientoLabel">Consultar Área de Conocimiento</h5>
                <!-- Título del modal para consultar un área de conocimiento -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Campos para ingresar el id y mostrar la información del área de conocimiento consultada -->
                <div class="form-group">
                    <label>Id</label>
                    <input type="text" class="form-control" @bind="consultaId" @bind:event="oninput" />
                    <!-- Campo para ingresar el id del área de conocimiento a consultar -->
                </div>
                <div class="form-group">
                    <label>Gran Área</label>
                    <input type="text" class="form-control" @bind="consultaGranArea" readonly />
                    <!-- Campo para mostrar la gran área del área de conocimiento consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Área</label>
                    <input type="text" class="form-control" @bind="consultaArea" readonly />
                    <!-- Campo para mostrar el área del área de conocimiento consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Disciplina</label>
                    <input type="text" class="form-control" @bind="consultaDisciplina" readonly />
                    <!-- Campo para mostrar la disciplina del área de conocimiento consultada, es de solo lectura -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarAreaConocimiento">Consultar</button>
                <!-- Botón para realizar la consulta del área de conocimiento con el id ingresado -->
                <button type="button" class="btn btn-warning" @onclick="ModificarAreaConocimientoConsultada" disabled="@(!areaEncontrada)">Modificar</button>
                <!-- Botón para modificar el área de conocimiento consultada si fue encontrada -->
                <button type="button" class="btn btn-danger" @onclick="EliminarAreaConocimientoConsultada" disabled="@(!areaEncontrada)">Eliminar</button>
                <!-- Botón para eliminar el área de conocimiento consultada si fue encontrada -->
            </div>
        </div>
    </div>
</div>

@code {
    private List<Dictionary<string, object>> areasConocimiento = new List<Dictionary<string, object>>();
    // Lista que almacena las areas de conocimiento obtenidas desde la API
    
    private Dictionary<string, object> areaActual = new Dictionary<string, object>();
    // Diccionario que representa el area de conocimiento actual que se está añadiendo o editando

    private bool esNuevaArea = true;
    // Bandera que indica si se está añadiendo una nueva area de conocimiento o editando una existente

    private bool areaEncontrada = false;
    // Bandera que indica si un area de conocimiento fue encontrada durante la consulta

    private string id = "";
    // Variable que almacena el id del area durante la edición o creación

    private string granArea = "";
    // Variable que almacena la gran área durante la edición o creación

    private string area = "";
    // Variable que almacena el área durante la edición o creación

    private string disciplina = "";
    // Variable que almacena la disciplina durante la edición o creación

    private string consultaId = "";
    // Variable que almacena el id del area que se va a consultar

    private string consultaGranArea = "";
    // Variable que almacena la gran área que se encontró durante la consulta

    private string consultaArea = "";
    // Variable que almacena el área que se encontró durante la consulta

    private string consultaDisciplina = "";
    // Variable que almacena la disciplina que se encontró durante la consulta

    protected override async Task OnInitializedAsync()
    {
        await CargarAreasConocimiento();
        // Método que se ejecuta al inicializar el componente. Carga la lista de áreas de conocimiento desde la API.
    }

    private async Task CancelarEliminacion()
    {
        await ServicioJS.InvokeVoidAsync("hideModal", "modalEliminarAreaConocimiento");
        await ServicioJS.InvokeVoidAsync("removeBackdrop");
    }

    private async Task CargarAreasConocimiento()
    {
        try
        {
            areasConocimiento = await ServicioApi.GetDataAsync("api/proyecto/area_conocimiento");
            areasConocimiento = areasConocimiento.Where(a => !(bool)(a["IsDeleted"] ?? false)).ToList(); // Filtra solo las activas

            // Llama a la API para obtener la lista de áreas de conocimiento y la almacena en la variable 'areasConocimiento'.
            StateHasChanged(); // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar áreas de conocimiento: {ex.Message}");
            // Opcional: Log error en vez de mostrar alerta
            // await ServicioJS.InvokeVoidAsync("console.log", "Error al cargar áreas de conocimiento.");
        }
    }

    private void PrepararParaAgregarOEditar(Dictionary<string, object>? areaConocimiento = null)
    {
        esNuevaArea = areaConocimiento == null;
        // Si 'areaConocimiento' es null, significa que estamos añadiendo una nueva area de conocimiento. De lo contrario, estamos editando.
        areaActual = areaConocimiento ?? new Dictionary<string, object>();
        // Si 'areaConocimiento' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario del area seleccionada.

        id = areaActual.TryGetValue("id", out var c) ? c?.ToString() ?? "" : "";
        granArea = areaActual.TryGetValue("gran_area", out var g) ? g?.ToString() ?? "" : "";
        area = areaActual.TryGetValue("area", out var a) ? a?.ToString() ?? "" : "";
        disciplina = areaActual.TryGetValue("disciplina", out var d) ? d?.ToString() ?? "" : "";
        // Extrae los valores de 'id', 'gran_area', 'area' y 'disciplina' de 'areaActual' y los asigna a las variables correspondientes.
        if(esNuevaArea) {
            ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarAreaConocimiento");
        } else {
            ServicioJS.InvokeVoidAsync("showModal", "modalAgregarAreaConocimiento");
        }
        // Muestra el modal para añadir o editar área de conocimiento usando JavaScript.
    }

    private void PrepararParaEditar(Dictionary<string, object>? areaConocimiento = null)
    {
        esNuevaArea = false;
        areaActual = areaConocimiento ?? new Dictionary<string, object>();
        // Si 'areaConocimiento' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario del área seleccionada.

        id = areaActual.TryGetValue("id", out var c) ? c?.ToString() ?? "" : "";
        granArea = areaActual.TryGetValue("gran_area", out var g) ? g?.ToString() ?? "" : "";
        area = areaActual.TryGetValue("area", out var a) ? a?.ToString() ?? "" : "";
        disciplina = areaActual.TryGetValue("disciplina", out var d) ? d?.ToString() ?? "" : "";
        // Extrae los valores de 'id', 'gran_area', 'area' y 'disciplina' de 'areaActual' y los asigna a las variables correspondientes.

        ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarAreaConocimiento");
        // Muestra el modal para editar el área de conocimiento usando JavaScript.
    }

    private void PrepararParaConsulta()
    {
        consultaId = "";
        consultaGranArea = "";
        consultaArea = "";
        consultaDisciplina = "";
        areaEncontrada = false;
        // Limpia los campos de consulta y establece 'areaEncontrada' en false.
    }

    private void AsignarAreaConocimientoParaEliminar(Dictionary<string, object> areaConocimiento)
    {
        areaActual = areaConocimiento;
        // Aquí asegúrate de que todos los datos del área de conocimiento seleccionada se estén asignando correctamente
        Console.WriteLine($"Área de conocimiento seleccionada para eliminar: Id: {areaActual["id"]}, Gran Área: {areaActual["gran_area"]}");
        
        ServicioJS.InvokeVoidAsync("showModal", "modalEliminarAreaConocimiento");
        // Muestra el modal para confirmar la eliminación usando JavaScript.
    }

    private async Task GuardarAreaConocimiento()
    {
        try
        {
            areaActual["id"] = id;
            areaActual["gran_area"] = granArea;
            areaActual["area"] = area;
            areaActual["disciplina"] = disciplina;
            // Actualiza 'areaActual' con los valores actuales de los campos de entrada.

            bool exito;
            if (esNuevaArea)
            {
                exito = await ServicioApi.AddEntityAsync("api/proyecto/area_conocimiento", areaActual);
                // Si estamos añadiendo una nueva area de conocimiento, llama a la API para añadirla.
            }
            else
            {
                exito = await ServicioApi.EditEntityAsync("api/proyecto/area_conocimiento/id", id, areaActual);
                // Si estamos editando un area de conocimiento existente, llama a la API para editarla.
            }

            if (exito)
            {
                await ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarAreaConocimiento");
                // Si la operación tiene éxito, cierra el modal.

                await CargarAreasConocimiento();
                // Recarga la lista de áreas de conocimiento para reflejar los cambios.

                id = granArea = area = disciplina = string.Empty;
                areaActual = new Dictionary<string, object>();
                esNuevaArea = true;
                // Limpia los campos del formulario y restablece el estado.

                StateHasChanged();
                // Fuerza la actualización de la UI.

                await ServicioJS.InvokeVoidAsync("alert", "Operación realizada con éxito.");
                // Muestra un mensaje de éxito al usuario.
            }
            else
            {
                await ServicioJS.InvokeVoidAsync("alert", "Error al guardar el área de conocimiento. Por favor, intente nuevamente.");
                // Si la operación falla, muestra un mensaje de error.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar área de conocimiento: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al guardar el área de conocimiento. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante el guardado.
        }
    }

    private async Task EliminarAreaConocimiento()
    {
        try
        {
            if (areaActual.TryGetValue("id", out var idObj) && idObj is string idStr)
            {
                areaActual["IsDeleted"] = true; // Cambia el estado a no activo
                bool exito = await ServicioApi.DeleteEntityAsync($"api/proyecto/area_conocimiento/id", idStr);
                if (exito)
                {
                    await ServicioJS.InvokeVoidAsync("hideModal", "modalEliminarAreaConocimiento");
                    await CargarAreasConocimiento();
                    await ServicioJS.InvokeVoidAsync("alert", "Área de conocimiento eliminada con éxito.");
                }
                else
                {
                    await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar el área de conocimiento. Por favor, intente nuevamente.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar área de conocimiento: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar el área de conocimiento. Por favor, intente nuevamente.");
        }
    }

    private async Task ConsultarAreaConocimiento()
    {
        try
        {
            var resultado = await ServicioApi.GetDataAsync($"api/proyecto/area_conocimiento/id/{consultaId}");
            if (resultado.Any())
            {
                var areaConsultada = resultado.First();
                consultaGranArea = areaConsultada["gran_area"]?.ToString() ?? "";
                consultaArea = areaConsultada["area"]?.ToString() ?? "";
                consultaDisciplina = areaConsultada["disciplina"]?.ToString() ?? "";
                areaEncontrada = true;
                // Si se encuentra un área con el id consultado, muestra los datos en los campos correspondientes.
            }
            else
            {
                consultaGranArea = "";
                consultaArea = "";
                consultaDisciplina = "";
                areaEncontrada = false;
                await ServicioJS.InvokeVoidAsync("alert", "No se encontró ningún área de conocimiento con ese id.");
                // Si no se encuentra ninguna área, limpia los campos y muestra un mensaje de alerta.
            }
            StateHasChanged();
            // Fuerza la actualización de la UI para reflejar los cambios.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar área de conocimiento: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al consultar el área de conocimiento. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la consulta.
        }
    }

    private async Task ModificarAreaConocimientoConsultada()
    {
        PrepararParaAgregarOEditar(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["gran_area"] = consultaGranArea,
            ["area"] = consultaArea,
            ["disciplina"] = consultaDisciplina
        });
        await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarAreaConocimiento");
        // Prepara los datos consultados para la edición y cierra el modal de consulta.
    }

    private async Task EliminarAreaConocimientoConsultada()
    {
        AsignarAreaConocimientoParaEliminar(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["gran_area"] = consultaGranArea,
            ["area"] = consultaArea,
            ["disciplina"] = consultaDisciplina
        });
        await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarAreaConocimiento");
        // Prepara los datos consultados para la eliminación y cierra el modal de consulta.
    }
}

<style>
    .table-title {
        background-color: #4C45A0;
        color: white;
        padding: 15px;
        border-radius: 8px 8px 0 0;
    }

    .table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 1rem;
        background-color: white;
    }

    .table thead th {
        background-color: #BCA6DA;
        color: #4C45A0;
        padding: 10px;
        font-weight: bold; 
    }

    .table tbody tr {
        border-bottom: 1px solid #ddd;
    }

    .table tbody tr:hover {
        background-color: #f1f1f1;
    }

    .table tbody td {
        padding: 10px;
    }

    .btn-success {
        background-color: #4C45A0;
        border-color: #4C45A0;
    }

    .btn-success:hover {
        background-color: #3b368c;
        border-color: #3b368c;
    }

    .edit i,
    .delete i {
        font-size: 20px;
        color: #3d5bc9;
        margin: 0 5px;
    }

    .edit i:hover {
        color: #BCA6DA;
    }

    .delete i:hover {
        color: red;
    }

    .modal-header {
        background-color: #4C45A0;
        color: white;
    }

    .btn-primary,
    .btn-danger {
        background-color: #4C45A0;
        border-color: #4C45A0;
    }

    .btn-primary:hover,
    .btn-danger:hover {
        background-color: #3b368c;
        border-color: #3b368c;
    }

    .btn-secondary {
        background-color: #BCA6DA;
        border-color: #BCA6DA;
        color: #4C45A0;
    }

    .btn-secondary:hover {
        background-color: #a394c2;
        border-color: #a394c2;
    }
</style>
