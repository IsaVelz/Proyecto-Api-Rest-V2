@page "/aspecto_normativo"
@using BlazorFrontEnd.Services
@inject ApiService ServicioApi
@inject IJSRuntime ServicioJS
<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Aspectos Normativos</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#modalAgregarAspectoNormativo" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepararParaAgregarOEditar()">
                            <i class="material-icons">&#xE147;</i> <span>Nuevo</span>
                        </a>
                        <a href="#modalConsultarAspectoNormativo" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepararParaConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </a>
                    </div>
                </div>
            </div>
            @if (aspectosNormativos == null)
            {
                <p>Cargando...</p>
            }
            else if (!aspectosNormativos.Any())
            {
                <p>No hay Aspectos Normativos registrados.</p>
            }
            else
            {
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Tipo</th>
                            <th>Descripción</th>
                            <th>Fuente</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var aspectoNormativo in aspectosNormativos)
                        {
                            <tr>
                                <td>@aspectoNormativo["id"]</td>
                                <td>@aspectoNormativo["tipo"]</td>
                                <td>@aspectoNormativo["descripcion"]</td>
                                <td>@aspectoNormativo["fuente"]</td>
                                <td>
                                    <a href="#modalAgregarAspectoNormativo" class="edit" data-bs-toggle="modal" @onclick="() => PrepararParaEditar(aspectoNormativo)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <a href="#modalEliminarAspectoNormativo" class="delete" data-bs-toggle="modal" @onclick="() => AsignarAspectoNormativoParaEliminar(aspectoNormativo)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para Añadir/Editar Aspecto Normativo -->
<div class="modal fade" id="modalAgregarAspectoNormativo" tabindex="-1" role="dialog" aria-labelledby="modalAgregarAspectoNormativoLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@aspectoNormativoActual" OnValidSubmit="GuardarAspectoNormativo">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAgregarAspectoNormativoLabel">@(esNuevoAspectoNormativo ? "Añadir" : "Editar") Aspecto Normativo</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label>Id</label>
                        <InputText class="form-control" @bind-Value="id" />
                        <ValidationMessage For="@(() => id)" />
                    </div>
                    <div class="form-group">
                        <label>Tipo</label>
                        <InputText class="form-control" @bind-Value="tipo" />
                        <ValidationMessage For="@(() => tipo)" />
                    </div>
                    <div class="form-group">
                        <label>Descripción</label>
                        <InputText class="form-control" @bind-Value="descripcion" />
                        <ValidationMessage For="@(() => descripcion)" />
                    </div>
                    <div class="form-group">
                        <label>Fuente</label>
                        <InputText class="form-control" @bind-Value="fuente" />
                        <ValidationMessage For="@(() => fuente)" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(esNuevoAspectoNormativo ? "Añadir" : "Guardar")</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Eliminar Aspecto Normativo -->
<div class="modal fade" id="modalEliminarAspectoNormativo" tabindex="-1" role="dialog" aria-labelledby="modalEliminarAspectoNormativoLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEliminarAspectoNormativoLabel">Eliminar Aspecto Normativo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar este Aspecto Normativo?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CancelarEliminacion">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarAspectoNormativo">Eliminar</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal para Consultar Aspecto Normativo -->
<div class="modal fade" id="modalConsultarAspectoNormativo" tabindex="-1" role="dialog" aria-labelledby="modalConsultarAspectoNormativoLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalConsultarAspectoNormativoLabel">Consultar Aspecto Normativo</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label>Id</label>
                    <input type="text" class="form-control" @bind="consultaId" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Tipo</label>
                    <input type="text" class="form-control" @bind="consultaTipo" readonly />
                </div>
                <div class="form-group">
                    <label>Descripción</label>
                    <input type="text" class="form-control" @bind="consultaDescripcion" readonly />
                </div>
                <div class="form-group">
                    <label>Fuente</label>
                    <input type="text" class="form-control" @bind="consultaFuente" readonly />
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarAspectoNormativo">Consultar</button>
                <button type="button" class="btn btn-warning" @onclick="ModificarAspectoNormativoConsultado" disabled="@(!aspectoNormativoEncontrado)">Modificar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarAspectoNormativoConsultado" disabled="@(!aspectoNormativoEncontrado)">Eliminar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Dictionary<string, object>> aspectosNormativos = new List<Dictionary<string, object>>();
    // Lista que almacena los aspectos normativos obtenidos desde la API
    
    private Dictionary<string, object> aspectoNormativoActual = new Dictionary<string, object>();
    // Diccionario que representa el aspecto normativo actual que se está añadiendo o editando

    private bool esNuevoAspectoNormativo = true;
    // Bandera que indica si se está añadiendo un nuevo aspecto normativo o editando uno existente

    private bool aspectoNormativoEncontrado = false;
    // Bandera que indica si un aspecto normativo fue encontrado durante la consulta

    private string id = "";
    // Variable que almacena el id del aspecto normativo durante la edición o creación

    private string tipo = "";
    // Variable que almacena el tipo del aspecto normativo durante la edición o creación

    private string descripcion = "";
    // Variable que almacena la descripción del aspecto normativo durante la edición o creación

    private string fuente = "";
    // Variable que almacena la fuente del aspecto normativo durante la edición o creación

    private string consultaId = "";
    // Variable que almacena el id del aspecto normativo que se va a consultar

    private string consultaTipo = "";
    // Variable que almacena el tipo del aspecto normativo que se encontró durante la consulta

    private string consultaDescripcion = "";
    // Variable que almacena la descripción del aspecto normativo que se encontró durante la consulta

    private string consultaFuente = "";
    // Variable que almacena la fuente del aspecto normativo que se encontró durante la consulta

    protected override async Task OnInitializedAsync()
    {
        await CargarAspectosNormativos();
        // Método que se ejecuta al inicializar el componente. Carga la lista de aspectos normativos desde la API.
    }

    private async Task CancelarEliminacion()
    {
        await ServicioJS.InvokeVoidAsync("hideModal", "modalEliminarAspectoNormativo");
        await ServicioJS.InvokeVoidAsync("removeBackdrop");
    }

    private async Task CargarAspectosNormativos()
    {
        try
        {
            aspectosNormativos = await ServicioApi.GetDataAsync("api/proyecto/aspecto_normativo");
            aspectosNormativos = aspectosNormativos.Where(a => !(bool)(a["IsDeleted"] ?? true)).ToList(); // Filtra solo los activos

            // Llama a la API para obtener la lista de aspectos normativos y la almacena en la variable 'aspectosNormativos'.
            StateHasChanged(); // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar aspectos normativos: {ex.Message}");
            // Opcional: Log error en vez de mostrar alerta
            // await ServicioJS.InvokeVoidAsync("console.log", "Error al cargar aspectos normativos."); 
        }
    }

    private void PrepararParaAgregarOEditar(Dictionary<string, object>? aspectoNormativo = null)
    {
        esNuevoAspectoNormativo = aspectoNormativo == null;
        // Si 'aspectoNormativo' es null, significa que estamos añadiendo un nuevo aspecto normativo. De lo contrario, estamos editando.
        aspectoNormativoActual = aspectoNormativo ?? new Dictionary<string, object>();
        // Si 'aspectoNormativo' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario del aspecto normativo seleccionado.

        id = aspectoNormativoActual.TryGetValue("id", out var i) ? i?.ToString() ?? "" : "";
        tipo = aspectoNormativoActual.TryGetValue("tipo", out var t) ? t?.ToString() ?? "" : "";
        descripcion = aspectoNormativoActual.TryGetValue("descripcion", out var d) ? d?.ToString() ?? "" : "";
        fuente = aspectoNormativoActual.TryGetValue("fuente", out var f) ? f?.ToString() ?? "" : "";
        // Extrae los valores de 'id', 'tipo', 'descripcion' y 'fuente' de 'aspectoNormativoActual' y los asigna a las variables correspondientes.
        if (esNuevoAspectoNormativo)
        {
            ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarAspectoNormativo");
        }
        else
        {
            ServicioJS.InvokeVoidAsync("showModal", "modalAgregarAspectoNormativo");
        }
        // Muestra el modal para añadir o editar aspecto normativo usando JavaScript.
    }

    private void PrepararParaEditar(Dictionary<string, object>? aspectoNormativo = null)
    {
        esNuevoAspectoNormativo = aspectoNormativo == null;
        // Si 'aspectoNormativo' es null, significa que estamos añadiendo un nuevo aspecto normativo. De lo contrario, estamos editando.
        aspectoNormativoActual = aspectoNormativo ?? new Dictionary<string, object>();
        // Si 'aspectoNormativo' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario del aspecto normativo seleccionado.

        id = aspectoNormativoActual.TryGetValue("id", out var i) ? i?.ToString() ?? "" : "";
        tipo = aspectoNormativoActual.TryGetValue("tipo", out var t) ? t?.ToString() ?? "" : "";
        descripcion = aspectoNormativoActual.TryGetValue("descripcion", out var d) ? d?.ToString() ?? "" : "";
        fuente = aspectoNormativoActual.TryGetValue("fuente", out var f) ? f?.ToString() ?? "" : "";
        // Extrae los valores de 'id', 'tipo', 'descripcion' y 'fuente' de 'aspectoNormativoActual' y los asigna a las variables correspondientes.
        ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarAspectoNormativo");
        // Esconde el modal para editar aspecto normativo usando JavaScript.
    }

    private void PrepararParaConsulta()
    {
        consultaId = "";
        consultaTipo = "";
        consultaDescripcion = "";
        consultaFuente = "";
        aspectoNormativoEncontrado = false;
        // Limpia los campos de consulta y establece 'aspectoNormativoEncontrado' en false.
    }

    private void AsignarAspectoNormativoParaEliminar(Dictionary<string, object> aspectoNormativo)
    {
        aspectoNormativoActual = aspectoNormativo;
        // Aquí asegúrate de que todos los datos del aspecto normativo seleccionado se estén asignando correctamente
        Console.WriteLine($"Aspecto normativo seleccionado para eliminar: Id: {aspectoNormativoActual["id"]}, Tipo: {aspectoNormativoActual["tipo"]}");
        
        ServicioJS.InvokeVoidAsync("showModal", "modalEliminarAspectoNormativo");
        // Muestra el modal para confirmar la eliminación usando JavaScript.
    }

    private async Task GuardarAspectoNormativo()
    {
        try
        {
            aspectoNormativoActual["id"] = id;
            aspectoNormativoActual["tipo"] = tipo;
            aspectoNormativoActual["descripcion"] = descripcion;
            aspectoNormativoActual["fuente"] = fuente;
            // Actualiza 'aspectoNormativoActual' con los valores actuales de los campos de entrada.

            bool exito;
            if (esNuevoAspectoNormativo)
            {
                exito = await ServicioApi.AddEntityAsync("api/proyecto/aspecto_normativo", aspectoNormativoActual);
                // Si estamos añadiendo un nuevo aspecto normativo, llama a la API para añadirlo.
            }
            else
            {
                exito = await ServicioApi.EditEntityAsync("api/proyecto/aspecto_normativo/id", id, aspectoNormativoActual);
                // Si estamos editando un aspecto normativo existente, llama a la API para editarlo.
            }

            if (exito)
            {
                await ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarAspectoNormativo");
                // Si la operación tiene éxito, cierra el modal.

                await CargarAspectosNormativos();
                // Recarga la lista de aspectos normativos para reflejar los cambios.

                id = tipo = descripcion = fuente = string.Empty;
                aspectoNormativoActual = new Dictionary<string, object>();
                esNuevoAspectoNormativo = true;
                // Limpia los campos del formulario y restablece el estado.

                StateHasChanged();
                // Fuerza la actualización de la UI.

                await ServicioJS.InvokeVoidAsync("alert", "Operación realizada con éxito.");
                // Muestra un mensaje de éxito al usuario.
            }
            else
            {
                await ServicioJS.InvokeVoidAsync("alert", "Error al guardar el aspecto normativo. Por favor, intente nuevamente.");
                // Si la operación falla, muestra un mensaje de error.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar aspecto normativo: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al guardar el aspecto normativo. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante el guardado.
        }
    }

    private async Task EliminarAspectoNormativo()
    {
        try
        {
            if (aspectoNormativoActual.TryGetValue("id", out var idObj) && idObj is string idStr)
            {
                aspectoNormativoActual["IsDeleted"] = true; // Cambia el estado a no activo
                bool exito = await ServicioApi.DeleteEntityAsync($"api/proyecto/aspecto_normativo/id", idStr);
                if (exito)
                {
                    await ServicioJS.InvokeVoidAsync("hideModal", "modalEliminarAspectoNormativo");
                    await CargarAspectosNormativos();
                    await ServicioJS.InvokeVoidAsync("alert", "Aspecto normativo eliminado con éxito.");
                }
                else
                {
                    await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar el aspecto normativo. Por favor, intente nuevamente.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar aspecto normativo: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar el aspecto normativo. Por favor, intente nuevamente.");
        }
    }

    private async Task ConsultarAspectoNormativo()
    {
        try
        {
            var resultado = await ServicioApi.GetDataAsync($"api/proyecto/aspecto_normativo/id/{consultaId}");
            if (resultado.Any())
            {
                var aspectoNormativoConsultado = resultado.First();
                consultaTipo = aspectoNormativoConsultado["tipo"]?.ToString() ?? "";
                consultaDescripcion = aspectoNormativoConsultado["descripcion"]?.ToString() ?? "";
                consultaFuente = aspectoNormativoConsultado["fuente"]?.ToString() ?? "";
                aspectoNormativoEncontrado = true;
                // Si se encuentra un aspecto normativo con el id consultado, muestra los datos en los campos correspondientes.
            }
            else
            {
                consultaTipo = "";
                consultaDescripcion = "";
                consultaFuente = "";
                aspectoNormativoEncontrado = false;
                await ServicioJS.InvokeVoidAsync("alert", "No se encontró ningún aspecto normativo con ese id.");
                // Si no se encuentra ningún aspecto normativo, limpia los campos y muestra un mensaje de alerta.
            }
            StateHasChanged();
            // Fuerza la actualización de la UI para reflejar los cambios.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar aspecto normativo: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al consultar el aspecto normativo. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la consulta.
        }
    }

    private async Task ModificarAspectoNormativoConsultado()
    {
        PrepararParaAgregarOEditar(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["tipo"] = consultaTipo,
            ["descripcion"] = consultaDescripcion,
            ["fuente"] = consultaFuente
        });
        await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarAspectoNormativo");
        // Prepara los datos consultados para la edición y cierra el modal de consulta.
    }

    private async Task EliminarAspectoNormativoConsultado()
    {
        AsignarAspectoNormativoParaEliminar(new Dictionary<string, object>
        {
            ["id"] = consultaId,
            ["tipo"] = consultaTipo,
            ["descripcion"] = consultaDescripcion,
            ["fuente"] = consultaFuente
        });
        await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarAspectoNormativo");
        // Prepara los datos consultados para la eliminación y cierra el modal de consulta.
    }
}

<style>
    .table-title {
        background-color: #4C45A0;
        color: white;
        padding: 15px;
        border-radius: 8px 8px 0 0;
    }

    .table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 1rem;
        background-color: white;
    }

    .table thead th {
        background-color: #BCA6DA;
        color: #4C45A0;
        padding: 10px;
        font-weight: bold; 
    }

    .table tbody tr {
        border-bottom: 1px solid #ddd;
    }

    .table tbody tr:hover {
        background-color: #f1f1f1;
    }

    .table tbody td {
        padding: 10px;
    }

    .btn-success {
        background-color: #4C45A0;
        border-color: #4C45A0;
    }

    .btn-success:hover {
        background-color: #3b368c;
        border-color: #3b368c;
    }

    .edit i,
    .delete i {
        font-size: 20px;
        color: #3d5bc9;
        margin: 0 5px;
    }

    .edit i:hover {
        color: #BCA6DA;
    }

    .delete i:hover {
        color: red;
    }

    .modal-header {
        background-color: #4C45A0;
        color: white;
    }

    .btn-primary,
    .btn-danger {
        background-color: #4C45A0;
        border-color: #4C45A0;
    }

    .btn-primary:hover,
    .btn-danger:hover {
        background-color: #3b368c;
        border-color: #3b368c;
    }

    .btn-secondary {
        background-color: #BCA6DA;
        border-color: #BCA6DA;
        color: #4C45A0;
    }

    .btn-secondary:hover {
        background-color: #a394c2;
        border-color: #a394c2;
    }
</style>
