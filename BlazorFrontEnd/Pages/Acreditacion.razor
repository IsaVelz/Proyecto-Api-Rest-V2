@page "/acreditacion"
@using BlazorFrontEnd.Services
@inject ApiService ServicioApi
@inject IJSRuntime ServicioJS
<div class="container-xl">
    <div class="table-responsive">
        <div class="table-wrapper">
            <div class="table-title">
                <div class="row">
                    <div class="col-sm-6">
                        <h2>Gestionar <b>Acreditaciones</b></h2>
                    </div>
                    <div class="col-sm-6">
                        <a href="#modalAgregarAcreditacion" class="btn btn-success" data-bs-toggle="modal" @onclick="() => PrepararParaAgregarOEditar()">
                            <i class="material-icons">&#xE147;</i> <span>Nueva</span>
                        </a>
                        <!-- Botón que abre el modal para añadir una nueva acreditación -->

                        <a href="#modalConsultarAcreditacion" class="btn btn-success" data-bs-toggle="modal" @onclick="PrepararParaConsulta">
                            <i class="material-icons">&#xE8B6;</i> <span>Consultar</span>
                        </a>
                        <!-- Botón que abre el modal para consultar una acreditación existente -->
                    </div>
                </div>
            </div>
            @if (acreditaciones == null)
            {
                <p>Cargando...</p>
                <!-- Muestra un mensaje mientras se cargan los datos -->
            }
            else if (!acreditaciones.Any())
            {
                <p>No hay Acreditaciones registradas.</p>
                <!-- Muestra un mensaje si no hay acreditaciones en la lista -->
            }
            else
            {
                <!-- Muestra la tabla con la lista de acreditaciones si la lista contiene datos -->
                <table class="table table-striped table-hover">
                    <thead>
                        <tr>
                            <th>Resolución</th>
                            <th>Tipo</th>
                            <th>Calificación</th>
                            <th>Fecha Inicio</th>
                            <th>Fecha Fin</th>
                            <th>Programa</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var acreditacion in acreditaciones)
                        {
                            <tr>
                                <td>@acreditacion["resolucion"]</td>
                                <!-- Muestra la resolución de la acreditación -->
                                <td>@acreditacion["tipo"]</td>
                                <!-- Muestra el tipo de la acreditación -->
                                <td>@acreditacion["calificacion"]</td>
                                <!-- Muestra la calificación de la acreditación -->
                                <td>@acreditacion["fecha_inicio"]</td>
                                <!-- Muestra la fecha de inicio de la acreditación -->
                                <td>@acreditacion["fecha_fin"]</td>
                                <!-- Muestra la fecha de fin de la acreditación -->
                                <td>@acreditacion["programa"]</td>
                                <!-- Muestra el programa de la acreditación -->
                                <td>
                                    <a href="#modalAgregarAcreditacion" class="edit" data-bs-toggle="modal" @onclick="() => PrepararParaEditar(acreditacion)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Editar">&#xE254;</i>
                                    </a>
                                    <!-- Botón para editar la acreditación -->
                                    <a href="#modalEliminarAcreditacion" class="delete" data-bs-toggle="modal" @onclick="() => AsignarAcreditacionParaEliminar(acreditacion)">
                                        <i class="material-icons" data-bs-toggle="tooltip" title="Eliminar">&#xE872;</i>
                                    </a>
                                    <!-- Botón para eliminar la acreditación -->
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        </div>
    </div>
</div>

<!-- Modal para Añadir/Editar Acreditación -->
<div class="modal fade" id="modalAgregarAcreditacion" tabindex="-1" role="dialog" aria-labelledby="modalAgregarAcreditacionLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <EditForm Model="@acreditacionActual" OnValidSubmit="GuardarAcreditacion">
                <DataAnnotationsValidator />
                <!-- Valida los campos del formulario usando anotaciones de datos en C# -->
                <div class="modal-header">
                    <h5 class="modal-title" id="modalAgregarAcreditacionLabel">@(esNuevaAcreditacion ? "Añadir" : "Editar") Acreditación</h5>
                    <!-- El título del modal cambia según si se está añadiendo o editando una acreditación -->
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!-- Campos del formulario para ingresar los datos de la acreditación -->
                    <div class="form-group">
                        <label>Resolución</label>
                        <InputText class="form-control" @bind-Value="resolucion" />
                        <ValidationMessage For="@(() => resolucion)" />
                        <!-- Campo para ingresar la resolución de la acreditación -->
                    </div>
                    <div class="form-group">
                        <label>Tipo</label>
                        <InputText class="form-control" @bind-Value="tipo" />
                        <ValidationMessage For="@(() => tipo)" />
                        <!-- Campo para ingresar el tipo de la acreditación -->
                    </div>
                    <div class="form-group">
                        <label>Calificación</label>
                        <InputText class="form-control" @bind-Value="calificacion" />
                        <ValidationMessage For="@(() => calificacion)" />
                        <!-- Campo para ingresar la calificación de la acreditación -->
                    </div>
                    <div class="form-group">
                        <label>Fecha Inicio</label>
                        <InputText class="form-control" @bind-Value="fecha_inicio" />
                        <ValidationMessage For="@(() => fecha_inicio)" />
                        <!-- Campo para ingresar la fecha de inicio de la acreditación -->
                    </div>
                    <div class="form-group">
                        <label>Fecha Fin</label>
                        <InputText class="form-control" @bind-Value="fecha_fin" />
                        <ValidationMessage For="@(() => fecha_fin)" />
                        <!-- Campo para ingresar la fecha de fin de la acreditación -->
                    </div>
                    <div class="form-group">
                        <label>Programa</label>
                        <InputText class="form-control" @bind-Value="programa" />
                        <ValidationMessage For="@(() => programa)" />
                        <!-- Campo para ingresar el programa de la acreditación -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">@(esNuevaAcreditacion ? "Añadir" : "Guardar")</button>
                    <!-- Botón de acción que cambia según si se está añadiendo o guardando -->
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para Eliminar Acreditación -->
<div class="modal fade" id="modalEliminarAcreditacion" tabindex="-1" role="dialog" aria-labelledby="modalEliminarAcreditacionLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalEliminarAcreditacionLabel">Eliminar Acreditación</h5>
                <!-- Título del modal para eliminar una acreditación -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>¿Está seguro de que desea eliminar esta Acreditación?</p>
                <p class="text-warning"><small>Esta acción no se puede deshacer.</small></p>
                <!-- Mensaje de advertencia para la eliminación -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-danger" @onclick="EliminarAcreditacion">Eliminar</button>
                <!-- Botón para confirmar la eliminación de la acreditación -->
            </div>
        </div>
    </div>
</div>

<!-- Modal para Consultar Acreditación -->
<div class="modal fade" id="modalConsultarAcreditacion" tabindex="-1" role="dialog" aria-labelledby="modalConsultarAcreditacionLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalConsultarAcreditacionLabel">Consultar Acreditación</h5>
                <!-- Título del modal para consultar una acreditación -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Campos para ingresar el código y mostrar la información de la acreditación consultada -->
                <div class="form-group">
                    <label>Resolución</label>
                    <input type="text" class="form-control" @bind="consultaResolucion" @bind:event="oninput" />
                    <!-- Campo para ingresar la resolución de la acreditación a consultar -->
                </div>
                <div class="form-group">
                    <label>Tipo</label>
                    <input type="text" class="form-control" @bind="consultaTipo" readonly />
                    <!-- Campo para mostrar el tipo de la acreditación consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Calificación</label>
                    <input type="text" class="form-control" @bind="consultaCalificacion" readonly />
                    <!-- Campo para mostrar la calificación de la acreditación consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Fecha Inicio</label>
                    <input type="text" class="form-control" @bind="consultaFechaInicio" readonly />
                    <!-- Campo para mostrar la fecha de inicio de la acreditación consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Fecha Fin</label>
                    <input type="text" class="form-control" @bind="consultaFechaFin" readonly />
                    <!-- Campo para mostrar la fecha de fin de la acreditación consultada, es de solo lectura -->
                </div>
                <div class="form-group">
                    <label>Programa</label>
                    <input type="text" class="form-control" @bind="consultaPrograma" readonly />
                    <!-- Campo para mostrar el programa de la acreditación consultada, es de solo lectura -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="ConsultarAcreditacion">Consultar</button>
                <!-- Botón para realizar la consulta de la acreditación con la resolución ingresada -->
                <button type="button" class="btn btn-warning" @onclick="ModificarAcreditacionConsultada" disabled="@(!acreditacionEncontrada)">Modificar</button>
                <!-- Botón para modificar la acreditación consultada si fue encontrada -->
                <button type="button" class="btn btn-danger" @onclick="EliminarAcreditacionConsultada" disabled="@(!acreditacionEncontrada)">Eliminar</button>
                <!-- Botón para eliminar la acreditación consultada si fue encontrada -->
            </div>
        </div>
    </div>
</div>

@code {
    private List<Dictionary<string, object>> acreditaciones = new List<Dictionary<string, object>>();
    // Lista que almacena las acreditaciones obtenidas desde la API
    
    private Dictionary<string, object> acreditacionActual = new Dictionary<string, object>();
    // Diccionario que representa la acreditación actual que se está añadiendo o editando

    private bool esNuevaAcreditacion = true;
    // Bandera que indica si se está añadiendo una nueva acreditación o editando una existente

    private bool acreditacionEncontrada = false;
    // Bandera que indica si una acreditación fue encontrada durante la consulta

    private string resolucion = "";
    // Variable que almacena la resolución de la acreditación durante la edición o creación

    private string tipo = "";
    // Variable que almacena el tipo de la acreditación durante la edición o creación

    private string calificacion = "";
    // Variable que almacena la calificación de la acreditación durante la edición o creación

    private string fecha_inicio = "";
    // Variable que almacena la fecha de inicio de la acreditación durante la edición o creación

    private string fecha_fin = "";
    // Variable que almacena la fecha de fin de la acreditación durante la edición o creación

    private string programa = "";
    // Variable que almacena el programa de la acreditación durante la edición o creación

    private string consultaResolucion = "";
    // Variable que almacena la resolución de la acreditación que se va a consultar

    private string consultaTipo = "";
    // Variable que almacena el tipo de la acreditación que se encontró durante la consulta

    private string consultaCalificacion = "";
    // Variable que almacena la calificación de la acreditación que se encontró durante la consulta

    private string consultaFechaInicio = "";
    // Variable que almacena la fecha de inicio de la acreditación que se encontró durante la consulta

    private string consultaFechaFin = "";
    // Variable que almacena la fecha de fin de la acreditación que se encontró durante la consulta

    private string consultaPrograma = "";
    // Variable que almacena el programa de la acreditación que se encontró durante la consulta

    protected override async Task OnInitializedAsync()
    {
        await CargarAcreditaciones();
        // Método que se ejecuta al inicializar el componente. Carga la lista de acreditaciones desde la API.
    }

    private async Task CargarAcreditaciones()
    {
        try
        {
            acreditaciones = await ServicioApi.GetDataAsync("api/proyecto/acreditacion");
            acreditaciones = acreditaciones.Where(a => !(bool)(a["IsDeleted"] ?? false)).ToList(); // Filtra solo las activas

            StateHasChanged(); // Fuerza la actualización de la UI después de cargar los datos.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar acreditaciones: {ex.Message}");
            // Opcional: Log error en vez de mostrar alerta
            // await ServicioJS.InvokeVoidAsync("console.log", "Error al cargar acreditaciones.");
        }
    }

    private void PrepararParaAgregarOEditar(Dictionary<string, object>? acreditacion = null)
    {
        esNuevaAcreditacion = acreditacion == null;
        // Si 'acreditacion' es null, significa que estamos añadiendo una nueva acreditación. De lo contrario, estamos editando.
        acreditacionActual = acreditacion ?? new Dictionary<string, object>();
        // Si 'acreditacion' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la acreditación seleccionada.

        resolucion = acreditacionActual.TryGetValue("resolucion", out var r) ? r?.ToString() ?? "" : "";
        tipo = acreditacionActual.TryGetValue("tipo", out var t) ? t?.ToString() ?? "" : "";
        calificacion = acreditacionActual.TryGetValue("calificacion", out var c) ? c?.ToString() ?? "" : "";
        fecha_inicio = acreditacionActual.TryGetValue("fecha_inicio", out var fi) ? fi?.ToString() ?? "" : "";
        fecha_fin = acreditacionActual.TryGetValue("fecha_fin", out var ff) ? ff?.ToString() ?? "" : "";
        programa = acreditacionActual.TryGetValue("programa", out var p) ? p?.ToString() ?? "" : "";
        // Extrae los valores de 'resolucion', 'tipo', 'calificacion', 'fecha_inicio', 'fecha_fin' y 'programa' de 'acreditacionActual' y los asigna a las variables correspondientes.

        if (esNuevaAcreditacion)
        {
            ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarAcreditacion");
        }
        else
        {
            ServicioJS.InvokeVoidAsync("showModal", "modalAgregarAcreditacion");
        }
        // Muestra el modal para añadir o editar acreditación usando JavaScript.
    }

    private void PrepararParaEditar(Dictionary<string, object>? acreditacion = null)
    {
        esNuevaAcreditacion = acreditacion == null;
        // Si 'acreditacion' es null, significa que estamos añadiendo una nueva acreditación. De lo contrario, estamos editando.
        acreditacionActual = acreditacion ?? new Dictionary<string, object>();
        // Si 'acreditacion' es null, inicializamos un nuevo diccionario. De lo contrario, usamos el diccionario de la acreditación seleccionada.

        resolucion = acreditacionActual.TryGetValue("resolucion", out var r) ? r?.ToString() ?? "" : "";
        tipo = acreditacionActual.TryGetValue("tipo", out var t) ? t?.ToString() ?? "" : "";
        calificacion = acreditacionActual.TryGetValue("calificacion", out var c) ? c?.ToString() ?? "" : "";
        fecha_inicio = acreditacionActual.TryGetValue("fecha_inicio", out var fi) ? fi?.ToString() ?? "" : "";
        fecha_fin = acreditacionActual.TryGetValue("fecha_fin", out var ff) ? ff?.ToString() ?? "" : "";
        programa = acreditacionActual.TryGetValue("programa", out var p) ? p?.ToString() ?? "" : "";
        // Extrae los valores de 'resolucion', 'tipo', 'calificacion', 'fecha_inicio', 'fecha_fin' y 'programa' de 'acreditacionActual' y los asigna a las variables correspondientes.

        ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarAcreditacion");
        // Esconde el modal para editar acreditación usando JavaScript.
    }

    private void PrepararParaConsulta()
    {
        consultaResolucion = "";
        consultaTipo = "";
        consultaCalificacion = "";
        consultaFechaInicio = "";
        consultaFechaFin = "";
        consultaPrograma = "";
        acreditacionEncontrada = false;
        // Limpia los campos de consulta y establece 'acreditacionEncontrada' en false.
    }

    private void AsignarAcreditacionParaEliminar(Dictionary<string, object> acreditacion)
    {
        acreditacionActual = acreditacion;
        // Aquí asegúrate de que todos los datos de la acreditación seleccionada se estén asignando correctamente
        Console.WriteLine($"Acreditación seleccionada para eliminar: Resolución: {acreditacionActual["resolucion"]}, Tipo: {acreditacionActual["tipo"]}");
        
        ServicioJS.InvokeVoidAsync("showModal", "modalEliminarAcreditacion");
        // Muestra el modal para confirmar la eliminación usando JavaScript.
    }

    private async Task GuardarAcreditacion()
    {
        try
        {
            acreditacionActual["resolucion"] = resolucion;
            acreditacionActual["tipo"] = tipo;
            acreditacionActual["calificacion"] = calificacion;
            acreditacionActual["fecha_inicio"] = fecha_inicio;
            acreditacionActual["fecha_fin"] = fecha_fin;
            acreditacionActual["programa"] = programa;
            // Actualiza 'acreditacionActual' con los valores actuales de los campos de entrada.

            bool exito;
            if (esNuevaAcreditacion)
            {
                exito = await ServicioApi.AddEntityAsync("api/proyecto/acreditacion", acreditacionActual);
                // Si estamos añadiendo una nueva acreditación, llama a la API para añadir la nueva acreditación.
            }
            else
            {
                exito = await ServicioApi.EditEntityAsync("api/proyecto/acreditacion/resolucion", resolucion, acreditacionActual);
                // Si estamos editando una acreditación existente, llama a la API para editarla.
            }

            if (exito)
            {
                await ServicioJS.InvokeVoidAsync("hideModal", "modalAgregarAcreditacion");
                // Si la operación tiene éxito, cierra el modal.

                await CargarAcreditaciones();
                // Recarga la lista de acreditaciones para reflejar los cambios.

                resolucion = tipo = calificacion = fecha_inicio = fecha_fin = programa = string.Empty;
                acreditacionActual = new Dictionary<string, object>();
                esNuevaAcreditacion = true;
                // Limpia los campos del formulario y restablece el estado.

                StateHasChanged();
                // Fuerza la actualización de la UI.

                await ServicioJS.InvokeVoidAsync("alert", "Operación realizada con éxito.");
                // Muestra un mensaje de éxito al usuario.
            }
            else
            {
                await ServicioJS.InvokeVoidAsync("alert", "Error al guardar la acreditación. Por favor, intente nuevamente.");
                // Si la operación falla, muestra un mensaje de error.
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al guardar acreditación: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al guardar la acreditación. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante el guardado.
        }
    }

    private async Task EliminarAcreditacion()
    {
        try
        {
            if (acreditacionActual.TryGetValue("resolucion", out var resolucionObj) && resolucionObj is string resolucionStr)
            {
                acreditacionActual["IsDeleted"] = true; // Cambia el estado a no activo
                bool exito = await ServicioApi.DeleteEntityAsync($"api/proyecto/acreditacion/resolucion", resolucionStr);
                if (exito)
                {
                    await ServicioJS.InvokeVoidAsync("hideModal", "modalEliminarAcreditacion");
                    await CargarAcreditaciones();
                    await ServicioJS.InvokeVoidAsync("alert", "Acreditación eliminada con éxito.");
                }
                else
                {
                    await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar la acreditación. Por favor, intente nuevamente.");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar acreditación: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al eliminar la acreditación. Por favor, intente nuevamente.");
        }
    }

    private async Task ConsultarAcreditacion()
    {
        try
        {
            var resultado = await ServicioApi.GetDataAsync($"api/proyecto/acreditacion/resolucion/{consultaResolucion}");
            if (resultado.Any())
            {
                var acreditacionConsultada = resultado.First();
                consultaTipo = acreditacionConsultada["tipo"]?.ToString() ?? "";
                consultaCalificacion = acreditacionConsultada["calificacion"]?.ToString() ?? "";
                consultaFechaInicio = acreditacionConsultada["fecha_inicio"]?.ToString() ?? "";
                consultaFechaFin = acreditacionConsultada["fecha_fin"]?.ToString() ?? "";
                consultaPrograma = acreditacionConsultada["programa"]?.ToString() ?? "";
                acreditacionEncontrada = true;
                // Si se encuentra una acreditación con la resolución consultada, muestra los datos en los campos correspondientes.
            }
            else
            {
                consultaTipo = "";
                consultaCalificacion = "";
                consultaFechaInicio = "";
                consultaFechaFin = "";
                consultaPrograma = "";
                acreditacionEncontrada = false;
                await ServicioJS.InvokeVoidAsync("alert", "No se encontró ninguna acreditación con esa resolución.");
                // Si no se encuentra ninguna acreditación, limpia los campos y muestra un mensaje de alerta.
            }
            StateHasChanged();
            // Fuerza la actualización de la UI para reflejar los cambios.
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al consultar acreditación: {ex.Message}");
            await ServicioJS.InvokeVoidAsync("alert", "Error al consultar la acreditación. Por favor, intente nuevamente.");
            // Muestra un error en la consola y una alerta si hay una excepción durante la consulta.
        }
    }

    private async Task ModificarAcreditacionConsultada()
    {
        PrepararParaAgregarOEditar(new Dictionary<string, object>
        {
            ["resolucion"] = consultaResolucion,
            ["tipo"] = consultaTipo,
            ["calificacion"] = consultaCalificacion,
            ["fecha_inicio"] = consultaFechaInicio,
            ["fecha_fin"] = consultaFechaFin,
            ["programa"] = consultaPrograma
        });
        await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarAcreditacion");
        // Prepara los datos consultados para la edición y cierra el modal de consulta.
    }

    private async Task EliminarAcreditacionConsultada()
    {
        AsignarAcreditacionParaEliminar(new Dictionary<string, object>
        {
            ["resolucion"] = consultaResolucion,
            ["tipo"] = consultaTipo,
            ["calificacion"] = consultaCalificacion,
            ["fecha_inicio"] = consultaFechaInicio,
            ["fecha_fin"] = consultaFechaFin,
            ["programa"] = consultaPrograma
        });
        await ServicioJS.InvokeVoidAsync("hideModal", "modalConsultarAcreditacion");
        // Prepara los datos consultados para la eliminación y cierra el modal de consulta.
    }
}

<style>
    .table-title {
        background-color: #4C45A0;
        color: white;
        padding: 15px;
        border-radius: 8px 8px 0 0;
    }

    .table {
        border-collapse: collapse;
        width: 100%;
        margin-bottom: 1rem;
        background-color: white;
    }

    .table thead th {
        background-color: #BCA6DA;
        color: #4C45A0;
        padding: 10px;
        font-weight: bold; 
    }

    .table tbody tr {
        border-bottom: 1px solid #ddd;
    }

    .table tbody tr:hover {
        background-color: #f1f1f1;
    }

    .table tbody td {
        padding: 10px;
    }

    .btn-success {
        background-color: #4C45A0;
        border-color: #4C45A0;
    }

    .btn-success:hover {
        background-color: #3b368c;
        border-color: #3b368c;
    }

    .edit i,
    .delete i {
        font-size: 20px;
        color: #3d5bc9;
        margin: 0 5px;
    }

    .edit i:hover {
        color: #BCA6DA;
    }

    .delete i:hover {
        color: red;
    }

    .modal-header {
        background-color: #4C45A0;
        color: white;
    }

    .btn-primary,
    .btn-danger {
        background-color: #4C45A0;
        border-color: #4C45A0;
    }

    .btn-primary:hover,
    .btn-danger:hover {
        background-color: #3b368c;
        border-color: #3b368c;
    }

    .btn-secondary {
        background-color: #BCA6DA;
        border-color: #BCA6DA;
        color: #4C45A0;
    }

    .btn-secondary:hover {
        background-color: #a394c2;
        border-color: #a394c2;
    }
</style>
